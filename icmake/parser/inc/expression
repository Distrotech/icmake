//_comma_expr:
//    ','
//    expression
//    {
//        $$ = $2;
//    }
//|
//    zeroframe
//;
//_comma_arglist:
//    ','
//    _args
//    {
//        $$ = $2;
//    }
//|
//    zeroframe
//;

_string:
    _string
    STRING
    {
        //addString();
    }
|
    STRING
    {
        //setString();
    }
;

_args:
    _args
    ','
    expression
    {
        // $$ = multargs($1, $3);
    }
|
    expression
    {
        // $$ = firstarg($1);
    }
;

_opt_arglist:
    _args
|
    zeroframe
;

_funcall:
    identifier
    '('
    _opt_arglist
    ')'
    {
        // $$ = *callFunction($1, $3);
    }
;

_equality:
    EQUALITY
    {}
;

_comparison:
    COMPARISON
    {}
;

_shift:
    SHIFT
    {}
;

_add:
    ADD
    {}
;

_mul:
    MUL
    {}
;

_incdec:
    INC
|
    DEC
;

_unop:
    UNOP
;

expression:
    expression
    '='
    expression
    {
        //$$ = assign($1, $3);
    }
|
    expression
    '['
    expression
    ']'
    {
        //$$ = indexOp($1, $3);
    }
|
    expression
    OR
    expression
    {
        //$$ = or_boolean(&$1, &$3);
    }
|
    expression
    AND
    expression
    {
        //$$ = and_boolean(&$1, &$3);
    }
|
    expression
    '|'
    expression
    {
        //$$ = binary_or(&$1, &$3);
    }
|
    expression
    '^'
    expression
    {
        //$$ = binary_xor($1, $2, $3);
    }
|
    expression
    '&'
    expression
    {
        //$$ = binary_and(&$1, &$3);
    }
|
    expression
    _equality                   %prec EQUALITY
    expression
    {
        //$$ = equality($1, $2, $3);
    }
|
    expression
    _comparison                 %prec COMPARISON
    expression
    {
        //$$ = comparison($1, $2, $3);
    }
|
    expression
    _shift                      %prec SHIFT
    expression
    {
        //$$ = shift($1, $2, $3);
    }
|
    expression
    _add                        %prec ADD
    expression
    {
        //$$ = addOps($1, $2, $3);
    }
|
    expression
    _mul                        %prec MUL
    expression
    {
        //$$ = mulOps($1, $2, $3);
    }
|
    _incdec
    expression                  %prec INC
    {
        //$$ = preIncDec($1, $2);
    }
|
    expression
    _incdec                     %prec INC
    {
        //$$ = postIncDec($1, $2);
    }
|
    _add
    expression                  %prec INC
    {
        //$$ = $2;
    }
|
    _unop
    expression                  %prec INC
    {
        //$$ = *bnot(&$2);
    }
|
    '('
    variable_type
    ')'
    expression                  %prec INC
    {
        //$$ = *cast($2.type, &$4);
    }
|
    '('
    expression
    ')'
    {
        $$ = $2;
    }
|
    '`'
    expression
    '`'
    {
        //$$ = *onearg(f_backtick, &$2);
    }
|
    _string
    {
        //$$ = *stackframe(e_str | e_const);
    }
|
    NUMBER
    {
        //$$ = *stackframe(e_int | e_const);
    }
|
    identifier
    {
        // //$$ = fetchvar();
    }
|
    _funcall
;







