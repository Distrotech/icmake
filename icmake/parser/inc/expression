_casttype:
    INT
|
    LIST
|
    STRINGTYPE
;

_string:
    _string
    STRING
    {
        stringbuf = xstrcat(stringbuf, lexstring);// catenate the new string 
    }
|
    STRING
    {
        free(stringbuf);                    // free former string 
        stringbuf = xstrdup(lexstring);     // duplicate initial string 
    }
;

_optint_string:
    STAT
|
    CHDIR
|
    SYSTEM
;

_comma_expr:
    ','
    err_expression
    {
        $$ = $2;
    }
|
    zeroframe
;

_optint_special:
    EXEC                                // optional int allowed 
|
    EXECUTE
;

_args:
    _args
    comma
    err_expression
    {
        $$ = *multargs(&$1, &$3);
    }
|
    err_expression
    {
        $$ = *firstarg(&$1);
    }
;

_comma_arglist:
    ','
    _args
    {
        $$ = $2;
    }
|
    zeroframe
;

_opt_arglist:
    _args
|
    zeroframe
;

_funname:
    IDENTIFIER
    {
        $$.evalue = fetchfun();
    }
;

_old_young:
    OLDER
|
    YOUNGER
;

_older_younger:
    {
        parse_error = err_older_younger; 
    }
    _old_young
    {
        $$ = $2;
    }
;

_makelist_expr:
    MAKELIST
    openpar
    err_expression
    {
        $$ = $3;
    }
;

_makelist_normal:
    {
        $$ = *stackframe(e_int | e_const);
        $$.evalue = O_FILE;
    }
;

_makelist:                                   // makelist(expr) 
    _makelist_expr
    _makelist_normal                    // returns O_FILE expression 
    {
        $$ = *makelist
             (
                 multargs
                 (
                     firstarg(&$2),     // O_FILE is passed 
                     &$1                // expression is passed 
                 ),
                 op_hlt                 // not op_younger or op_older 
             );
    }
|
                                        // makelist(expr, expr) 
    _makelist_expr
    comma
    err_expression
    {
        $$ = *makelist
             (
                 multargs
                 (
                     firstarg(&$1),     // fileattribute is passed 
                     &$3                // expression is passed 
                 ),
                 op_hlt                 // not op_younger or op_older 
             );
    }
|
    _makelist_expr                       // makelist(expr, older, expr) 
    comma
    _older_younger
    comma
    err_expression
    _makelist_normal
    {
        $$ = *makelist
             (
                multargs
                (
                    multargs
                    (
                        firstarg(&$6),  // O_FILE   is passed 
                        &$1             // 1st expression is passed 
                    ),
                    &$5                 // 2nd expression is passed 
                 ),
                 $3.type                // older/younger 
             );
    }
|
    _makelist_expr                 // makelist(expr, expr, older, expr) 
    comma
    err_expression
    comma
    _older_younger
    comma
    err_expression
    {
        $$ = *makelist
             (
                multargs
                (
                    multargs
                    (
                        firstarg(&$1),  // attribute is passed 
                        &$3             // 2nd expression is passed 
                    ),
                    &$7                 // 3rd expression is passed 
                 ),
                 $5.type                // older/younger 
             );
    }
;

_function:
    ZEROARG_FUN
    openpar
    {
        $$ = *zeroargs($1.type);
    }
|
    ONE_ARG_FUN
    openpar
    err_expression
    {
        $$ = *onearg($1.type, &$3);
    }
|
    TWO_ARG_FUNCTION
    openpar
    err_expression
    comma
    err_expression
    {
        $$ = *twoargs($1.type, &$3, &$5);
    }
|
    THREE_ARG_FUNCTION
    openpar
    err_expression
    comma
    err_expression
    comma
    err_expression
    {
        $$ = *threeargs($1.type, &$3, &$5, &$7);
    }
|
    _optint_string                      // CHDIR, SYSTEM, STAT 
    openpar
    err_expression                      // int inserted if string 
    _comma_expr                         // may be string if first == int 
    {
        $$ = *optint_string($1.type, &$3, &$4);
    }
|
    _optint_special                     // EXEC, EXECUTE 
    openpar                             // alternatives: 
    err_expression                      // fun(int, string, ...) 
    _comma_arglist                      // fun(string, ...)       
    {
        $$ = *optint_special($1.type, &$3, &$4);
    }
|
    PRINTF
    openpar
    _args                               // first may be anything 
    {
        $$ = *specials(f_printf, &$3);
    }
|
    FPRINTF
    openpar
    _args                               // argcount >= 2 required 
    {
        $$ = *exec_fprintf($1.type, &$3);
    }
|
    _funname
    openpar
    _opt_arglist
    {
        $$ = *callfun($1.evalue, &$3);
    }
|
    _makelist
;

_func_or_var:
    _function
    closepar
|
    IDENTIFIER
    {
        $$ = *fetchvar();
    }
;

_backtick:   
    {
        parse_error = err_backtick_expected; 
    }
    '`' 
;

_math_assign:
    MATH_ASSIGN
    {}
;

_equality
    EQUALITY
    {}
;

_comparison
    COMPARISON
    {}
;

expression:
    expression
    '='
    expression
    {
        $$ = *assign(&$1, &$3);
    }
|
    expression
    '['
    expression
    ']'
    {
        $$ = *indexOp(&$1, &$3);
    }
|
    expression
    _math_assign
    expression
    {
        $$ = *math_ass(&$1, &$3, multiply, "*=");
    }
|
    expression
    OR
    expression
    {
        $$ = *or_boolean(&$1, &$3);
    }
|
    expression
    AND
    expression
    {
        $$ = *and_boolean(&$1, &$3);
    }
|
    expression
    _equality
    expression
    {
        $$ = *equality(&$1, $2, &$3);
    }
|
    expression
    _comparison
    expression
    {
        $$ = *smaller(&$1, &$3);
    }
|
    expression
    _addOps
    expression
    {
        $$ = *addition(&$1, &$3);
    }
|
    expression
    '&'
    expression
    {
        $$ = *band(&$1, &$3);
    }
|
    expression
    '|'
    expression
    {
        $$ = *bor(&$1, &$3);
    }
|
    expression
    '^'
    expression
    {
        $$ = *xor(&$1, &$3);
    }
|
    expression
    _shift
    expression
    {
        $$ = *shl(&$1, &$3);
    }
|
    expression
    _mulOps
    expression
    {
        $$ = *multiply(&$1, &$3);
    }
|
    '-'
    expression          %prec '!'
    {
        $$ = *negate(&$2);
    }
|
    INC
    expression
    {
        $$ = *incdec(pre_op, op_inc, &$2);
    }
|
    expression
    INC
    {
        $$ = *incdec(post_op, op_inc, &$1);
    }
|
    DEC
    expression
    {
        $$ = *incdec(pre_op, op_dec, &$2);
    }
|
    expression
    DEC
    {
        $$ = *incdec(post_op, op_dec, &$1);
    }
|
    '+'
    expression          %prec '!'
    {
        $$ = $2;
    }
|
    '~'
    expression
    {
        $$ = *bnot(&$2);
    }
|
    '!'
    expression
    {
        $$ = *not_boolean(&$2);
    }
|
    '('
    _casttype
    ')'
    expression         %prec '!'
    {
        $$ = *cast($2.type, &$4);
    }
|
    _string
    {
        $$ = *stackframe(e_str | e_const);
    }
|
    NUMBER
    {
        $$ = *stackframe(e_int | e_const);
    }
|
    '('
    expression
    closepar
    {
        $$ = $2;
    }
|
    _func_or_var
|
    '`'
    expression
    _backtick
    {
        $$ = *onearg(f_backtick, &$2);
    }
;







