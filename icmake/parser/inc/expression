_string:
    _string
    STRINGTOKEN
    {
        addString();
    }
|
    STRINGTOKEN
    {
        setString();
    }
;

_comma_expr:
    ','
    err_expression
    {
        $$ = $2;
    }
|
    zeroframe
;

// _optint_special:
//     EXEC                                // optional int allowed 
// |
//     EXECUTE
// ;

_args:
    _args
    ','
    err_expression
    {
        $$ = multargs($1, $3);
    }
|
    err_expression
    {
        $$ = firstarg($1);
    }
;

_comma_arglist:
    ','
    _args
    {
        $$ = $2;
    }
|
    zeroframe
;

_opt_arglist:
    _args
|
    zeroframe
;

_old_young:
    OLDER
|
    YOUNGER
;

_older_younger:
    _old_young
    {
        $$ = $2;
    }
;

// _makelist_expr:
//     MAKELIST
//     '('
//     err_expression
//     {
//         $$ = $3;
//     }
// ;
// 
// _makelist_normal:
//     {
//         $$ = *stackframe(e_int | e_const);
//         $$.evalue = O_FILE;
//     }
// ;
// 
// _makelist:                              // makelist(expr) 
//     _makelist_expr
//     _makelist_normal                    // returns O_FILE expression 
//     {
//         $$ = *makelist
//              (
//                  multargs
//                  (
//                      firstarg(&$2),     // O_FILE is passed 
//                      &$1                // expression is passed 
//                  ),
//                  op_hlt                 // not op_younger or op_older 
//              );
//     }
// |
//                                         // makelist(expr, expr) 
//     _makelist_expr
//     ','
//     err_expression
//     {
//         $$ = *makelist
//              (
//                  multargs
//                  (
//                      firstarg(&$1),     // fileattribute is passed 
//                      &$3                // expression is passed 
//                  ),
//                  op_hlt                 // not op_younger or op_older 
//              );
//     }
// |
//     _makelist_expr                       // makelist(expr, older, expr) 
//     ','
//     _older_younger
//     ','
//     err_expression
//     _makelist_normal
//     {
//         $$ = *makelist
//              (
//                 multargs
//                 (
//                     multargs
//                     (
//                         firstarg(&$6),  // O_FILE   is passed 
//                         &$1             // 1st expression is passed 
//                     ),
//                     &$5                 // 2nd expression is passed 
//                  ),
//                  $3.type                // older/younger 
//              );
//     }
// |
//     _makelist_expr                 // makelist(expr, expr, older, expr) 
//     ','
//     err_expression
//     ','
//     _older_younger
//     ','
//     err_expression
//     {
//         $$ = *makelist
//              (
//                 multargs
//                 (
//                     multargs
//                     (
//                         firstarg(&$1),  // attribute is passed 
//                         &$3             // 2nd expression is passed 
//                     ),
//                     &$7                 // 3rd expression is passed 
//                  ),
//                  $5.type                // older/younger 
//              );
//     }
// ;

_identifier
    IDENTIFIER
    {
    }
;

_function:
    _identifier
    '('
    _opt_arglist
    {
        $$ = *callFunction($1, $3);
    }
;

_func_or_var:
    _function
    ')'
|
    IDENTIFIER
    {
        $$ = fetchvar();
    }
;

_math_assign:
    MATH_ASSIGN
    {}
;

_equality
    EQUALITY
    {}
;

_comparison
    COMPARISON
    {}
;

expression:
    expression
    '='
    expression
    {
        $$ = assign($1, $3);
    }
|
    expression
    '['
    expression
    ']'
    {
        $$ = indexOp($1, $3);
    }
|
    expression
    OR
    expression
    {
        $$ = or_boolean(&$1, &$3);
    }
|
    expression
    AND
    expression
    {
        $$ = and_boolean(&$1, &$3);
    }
|
    expression
    '|'
    expression
    {
        $$ = binary_or(&$1, &$3);
    }
|
    expression
    '^'
    expression
    {
        $$ = binary_xor($1, $2, $3);
    }
|
    expression
    '&'
    expression
    {
        $$ = binary_and(&$1, &$3);
    }
|
    expression
    _equality                   %prec EQUALITY
    expression
    {
        $$ = equality($1, $2, $3);
    }
|
    expression
    _comparison                 %prec COMPARISON
    expression
    {
        $$ = comparison($1, $2, $3);
    }
|
    expression
    _shift                      %prec SHIFT
    expression
    {
        $$ = shift($1, $2, $3);
    }
|
    expression
    _addOps                     %prec ADD
    expression
    {
        $$ = addOps($1, $2, $3);
    }
|
    expression
    _mulOps                     %prec MUL
    expression
    {
        $$ = mulOps($1, $2, $3);
    }
|
    '-'
    expression                  %prec UNOP
    {
        $$ = negate($2);
    }
|
    _incdec
    expression                  %prec UNOP
    {
        $$ = preIncDec($1, $2);
    }
|
    expression
    _incdec                     %prec UNOP
    {
        $$ = postIncDec($1, $2);
    }
|
    '+'
    expression                  %prec UNOP
    {
        $$ = $2;
    }
|
    _unop
    expression                  %prec UNOP
    {
        $$ = *bnot(&$2);
    }
|
    '('
    ilsType
    ')'
    expression         %prec '!'
    {
        $$ = *cast($2.type, &$4);
    }
|
    _string
    {
        $$ = *stackframe(e_str | e_const);
    }
|
    NUMBER
    {
        $$ = *stackframe(e_int | e_const);
    }
|
    '('
    expression
    ')'
    {
        $$ = $2;
    }
|
    _func_or_var
|
    '`'
    expression
    '`'
    {
        $$ = *onearg(f_backtick, &$2);
    }
;







