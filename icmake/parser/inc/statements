_compound:
    '{'                                 // } (for matching)
    statements
    '}'
    {
        $$ = $2;
    }
;

//_expr_code:
//    expression
//    {
//        $$ = *expr_stmnt(&$1);
//    }
//;

_var_expression:
    expression
|
    variable_type
    vardef
;

_pushdead:
    {
        //push_dead();                    // set new dead-level 
    }
;

_nesting:
    _pushdead
    {
        //nestlevel++;
    }
;

_while:
    WHILE
    _nesting
;

_break_ok:
    {
        //break_ok++;
    }
;

_popdead:
    {
        //pop_dead();
    }
;

_while_stat:
    _while
    '('
    _var_expression
    ')'
    _break_ok
    _statement
    _popdead
    {
        //$$ = *while_stmnt(&$3, &$6);
    }
;

_if:
    IF
    _nesting
;

_else_tail:
    ELSE
    _statement
    {
        //$$ = $2;
    }
|
    zeroframe
;

_if_stat:
    _if
    '('
    _var_expression
    ')'
    _statement
    _popdead
    _pushdead
    _else_tail
    _popdead
    {
        //$$ = *if_stmnt(&$3, &$5, &$8);
    }
;

_for:
    FOR
    _nesting
;

_expr_list:
    _expr_list
    ','
    expression
    {
        //$$ = *catcode(&$1, &$3);
    }
|
    expression
;

_opt_expr_list:
    _expr_list
|
    zeroframe
;

_opt_expression:
    expression
|
    {
        //$$ = *stackframe(e_int | e_const);
        //$$.evalue = 1;
    }
;

_opt_var_list:
    // empty
|
    _expr_list
|
    local_variables
;

_for_stat:
    _for
    '('
    _opt_var_list
    ';'
    _opt_expression
    ';'
    _opt_expr_list
    ')'
    _break_ok
    _statement
    _popdead
    {
        //$$ = *for_stmnt(&$3, &$5, &$7, &$10);
    }
;

_return_tail:
    expression
|
    zeroframe
;

_leave:
    LEAVE
;

_return_stat:
    _leave
    _return_tail
    {
        //$$ = *return_stmnt($1.type, &$2);
    }
;

_break_stat:
    BREAK
    {
        //$$ = *break_stmnt();
    }
;

_stmnt:
    _compound
|
    ';'
    zeroframe
    {
        //$$ = $1;
    }
|
    expression
    ';'
|
    _while_stat
|
    _if_stat
|
    _for_stat
|
    _return_stat
    ';'
|
    _break_stat
    ';'
|
    local_variables
|
    error
    ';'
;

_statement:
    _stmnt
    {
        //sem_err = 0;
    }
;

statements:
    statements
    _statement
    {
        //$$ = *cat_stmnt(&$1, &$2);
    }
|
    zeroframe
;
