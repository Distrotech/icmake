#!/usr/bin/icmake -qt/tmp/icmstart

    // Change this into the location of the directory containing icmbuild's 
    // CLASSES and icmconf files:
#define BASE    "/usr/share/doc/icmake/icmbuild"

//                      NO CONFIGURABLE PARTS BELOW THIS LINE

void usage(string progname)
{
    printf("Usage: ", get_base(progname), " [-m[main]] dir+\n"
        "Where:\n"
        "    -m[main.cc]: if provided, a main.cc and main.ih header file\n"
        "          will be created. The default name may be altered by\n"
        "          specifying an alternate name. An alternate name should\n"
        "           not be separated by blanks from the -m option.\n"
        "    dir+: one or more directory names. The first name will be the\n"
        "          directory containing icmbuild's CLASSES and icmconf files\n"
        "          as well as all remaining arguments as subdirectories.\n"
        "          The additional subdirectories are already added to "
                                                                "CLASSES\n"
        "\n");
    exit(1);
}

void main(int argc, list argv)
{
    string main;
    string header;
    int idx;
    int firstdir = 1;

    if (argc > 1 && substr(argv[1], 0, 2) == "-m")
    {
        ++firstdir;
        main = substr(argv[1], 2, 999);
        if (main == "")
            main = "main.cc";
    }

    if (argc == firstdir)
        usage(argv[0]);

    if (exists(argv[firstdir]))
    {
        printf("`", argv[firstdir], "' is in the way. Remove it first\n");
        exit(1);
    }
    
    system("mkdir " + argv[firstdir]);
    chdir(argv[firstdir]);

    system("cp "  BASE  "/CLASSES "  BASE  "/icmconf .");
    for (idx = firstdir + 1; idx < argc; ++idx)
    {
        if (system(P_NOCHECK, "mkdir " + argv[idx]) != 0)
        {
            printf("Can't create `", argv[idx], 
                    "': commented out in CLASSES\n");
            fprintf("CLASSES", "# ");
        }
        fprintf("CLASSES", argv[idx], "\n");
    }

//    if (!exists("frames"))
//        exit(0);
//
//    frames = `cat frames`;
//
//    for (idx = sizeof(frames); idx--; )
//        installFrame(frames[idx]);

    if (strlen(main) == 0)
        exit(0);

    header = get_base(main) + ".ih";

    
    list frames = `cat frames`;

    if (exists(main))
        printf("Not writing already existing file `", main, "'\n");
    else
        fprintf(main,
            "#include \"", header, "\"\n"
			"\n"
			"int main(int argc, char **argv)\n"
			"try\n"
			"{\n"
			"\n"
			"    return 0;\n"
			"}\n"
			"catch(...)\n"
			"{\n"
			"    return 1;\n"
			"}\n"
        );

    if (exists(header))
        printf("Not writing already existing file `", header, "'\n");
    else
        fprintf(header,
			"#include <iostream>\n"
			"#include <string>\n"
			"\n"
			"using namespace std;\n"
        );

    exit(0);
}

        
