#!/usr/bin/icmake -qt/tmp/icmstart

    // Change this into the location of the directory containing icmbuild's 
    // CLASSES and icmconf files:
#define CONFIG    "/usr/lib/icmake"

    // Location of the frame files.
#define SKEL  "/etc/icmake/icmstart.rc"

//                      NO CONFIGURABLE PARTS BELOW THIS LINE

string g_skel;
string g_program;
int g_interactive;
int g_replace;

void usage()
{
    printf("Usage: ", g_program, " [-f] [-i] [-r] [-s skelpath] dir "
                                                        "[program|library]\n"
        "Where:\n"
        "         -f: do NOT install the skeleton files, if any.\n"
        "         -i: interactively determine which skeleton files to "
                                                            "install\n"
        "         -r: replace already existing files/directories\n"
        " -s skeldir: Read the skeleton information from the directory "
                                                            "`skeldir'\n"
        "             (by default the skeleton files are located in "
                                                            "/etc/icmake)\n"
        "        dir: the directory to contain icmbuild's CLASSES and icmconf "
                                                                    "files\n"
        "program | library: [optional] default command passed to the\n"
        "           icmbuild script\n"
        "\n");

    exit(1);
}

int isDir(string s)
{
    return stat(s)[0] & S_IFDIR;
}

int isFile(string s)
{
    return stat(s)[0] & S_IFREG;
}

void die(string s)
{
    printf(g_program, ": ", s, "\n");
    exit(1);
}

void installFrame(string frameFile)
{
    string file;
    string path;
    list fields;

    fields = strtok(frameFile, " \t\n");
    if (sizeof(fields) == 0)
        return;

    file = fields[0];
    if (file[0] == "#")
        return;

    path = get_path(file);

    if (!strlen(path))
        path = ".";
    else if (!exists(path))
        return;

    if (exists(file))
        printf("Not installing already existing `", file, "'\n");
    else
        system("cp ../" + g_skel + "/" + file + " " + path);
}

int replace(string target)
{
    printf("`", target, "' exists. Replace [yN] ? ");
    return getch() == "y";
}

int available(string target)
{
    if (!exists(target))
        return 0;

    if (!g_replace)
        die("`" + target + "' is in the way. Remove it first");

    return replace(target) == 0;// if replace: return 0, meaning: not avail.
}
        
void tarinstall(string srcdir, string file, string dstdir)
{
    int idx;
    list files;

    echo(OFF);
    files = `"(cd " + srcdir + "; tar cf - " + file + ")| tar tf -"`;

    for (idx = sizeof(files); idx--; )
    {
        file = strtok(dstdir + "/" + files[idx], "\n")[0];

        if (!available(file))
            system("(cd " + srcdir + "; tar cf - " + file + ")|"
                   "(cd " + dstdir + "; tar xf -)");
    }
    echo(ON);
}

void main(int argc, list argv)
{
    string arg;
    string cmd;
    int idx;
    int skeletons = 1;
    int cmdidx = 1;

    g_program = get_base(argv[0]);

    if (argc == 1)
        usage();

    g_skel = SKEL;
    while (cmdidx < argc)
    {
        arg = argv[cmdidx];

        if (arg[0] != "-")
            break;

        if (arg[1] == "f")
            skeletons = 0;
        else if (arg[1] == "i")
            g_interactive = 1;
        else if (arg[1] == "r")
            g_replace = 1;
        else if (arg[1] == "s")
        {
            g_skel = substr(arg, 2, 999);

            if (g_skel == "")
            {
                if (cmdidx == argc)
                    die("-s lacks skeleton dir specification");

                g_skel = argv[++cmdidx];
            }
            if (isDir(g_skel))
                g_skel += "/icmstart.rc";
        }
        else
            printf("ignoring unkown option ", arg, "\n");

        ++cmdidx;
    }

    if (!available(argv[cmdidx]))
        system("mkdir -p " + argv[cmdidx]);

    chdir(argv[cmdidx]);

    tarinstall(CONFIG, "CLASSES icmconf", ".");

    if (++cmdidx < argc)
    {
        cmd = argv[cmdidx];
        if (cmd ==  "program" || cmd == "library")
            fprintf("icmconf", "#define DEFCOM \"", cmd, "\"\n");
        else
            printf("Ignored initial command `", cmd, "' for icmbuild\n");
    }

    if (!skeletons)
        exit(0);

    if (!isFile(g_skel))
        die("[Warning] Missing skeleton specification file `" + g_skel + "'");

    exit(0);

//    skeletons = `"cat ../" + g_skel + "/skel"`;
//
//    for (idx = sizeof(skeletons); idx--; )
//        installFrame(skeletons[idx]);

    exit(0);
}










