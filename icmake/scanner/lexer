%filenames scanner
%x str comment

OPTBL   [[:blank:]]*
BL      [[:blank:]]+
IDENT   [_[:alpha:]][_[:alnum:]]*

DEFINE      {OPTBL}#{OPTBL}define{BL}.*
IFDEF       {OPTBL}#{OPTBL}ifdef{BL}{IDENT}
IFNDEF      {OPTBL}#{OPTBL}ifndef{BL}{IDENT}
UNDEF       {OPTBL}#{OPTBL}undef{BL}{IDENT}
INCLUDE     {OPTBL}#{OPTBL}include{BL}\".*\"{OPTBL}
IM_INCLUDE  {OPTBL}#{OPTBL}include{BL}\<.*\>{OPTBL}

%%

//.*                |
{BL}                blanks();

"/*"                comment();

^{INCLUDE}$         changeFile();
^{IM_INCLUDE}$      changeImFile();
^{DEFINE}           define();
^{IFDEF}            ifdef();
^{IFNDEF}           ifndef();
^{UNDEF}            undef();

\n                  newline();


'.'                     {
                            sprintf(lexstring, "%d%c", yytext[1], 0);
                            return token(Parser::NUMBER);
                        }

"=="                    |
"!="                    return equality();

"<="                    return comparison(Token::SMALLER_EQUAL);
">="                    return comparison(Token::GREATER_EQUAL);
'<'                     |
'>'                     |
newer                   |
younger                 |
older                   return comparison();


">>"                    return shift(Token::SHR);
"<<"                    return shift(Token::SHL);

'+'                     |
'-'                     return add();

'*'                     |
'/'                     |
'%'                     return mul();


"++"                    |
"--"                    return incdec();

'!'                     |
'~'                     return unop();

"/="                    |
"-="                    |  
"*="                    |
"%="                    |
"+="                    | 
"&="                    |
"|="                    |
"^="                    |
"<<="                   |
">>="                   |
'='                     return assign();

"||"                    return token(Token::OR);
"&&"                    return token(Token::AND);


0x[[:xdigit:]]+         return hexNumber();
0[0-9]*                 return octNumber();
[1-9][0-9]*             return decNumber();

OFF                     return token(Token::OFF);
ON                      return token(Token::ON);
O_ALL                   return token(Token::ALL);
O_DIR                   return token(Token::DIR);
O_FILE                  return token(Token::FILE);
O_SUBDIR                return token(Token::SUBDIR);
P_CHECK                 return token(Token::CHECK);
P_NOCHECK               return token(Token::NOCHECK);
S_IEXEC                 return token(Token::EXEC);
S_IFCHR                 return token(Token::IFCHR);
S_IFDIR                 return token(Token::IFDIR);
S_IFREG                 return token(Token::IFREG);
S_IREAD                 return token(Token::READ);
S_IWRITE                return token(Token::WRITE);


{IDENT}                 return token(Parser::IDENTIFIER);

.                       return token();

<comment>{
    "*/"                begin(StartCondition__::initial);
    .|\n                ;
}

<str>{
    \"                  return str();    // also unescapes
    .                   |
    \\.                 more();
}


