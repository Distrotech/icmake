#!/usr/bin/icmake -qt /tmp/icmstart

#define SKEL  "/usr/share/icmake/"
#define CONF  "/etc/icmake/"

string g_confpath = CONF;
string g_conffile;
string g_skelpath = SKEL;
string g_program;
string g_defaultcommand = "";
string g_destpath;
string g_cwd;
list   g_mkdir;

int g_confirminstall = 0;
int g_skeletons = 1;
int g_replace = 0;
int g_debug = 0;
int g_askreplace = 1;

void usage()
{
    printf("Usage: ", g_program, " [Options] dir [program|library]\n"
        "Where:\n"
        "   Options:\n"
        "     -c confpath: Use the configuration files (icmstart.rc, "
                                                                "VERSION\n"
        "                  and AUTHOR in `confpath' rather than " CONF "\n"
        "     -d: debug: do not execute any commands, but show commands\n"
        "         that would have been executed\n"
        "     -I: do NOT install any files.\n"
        "     -r: replace existing files/directories\n"
        "     -s skelpath: Read the skeleton information from the directory\n"
        "                  `skelpath' rather than " SKEL "\n"
        "   dir: the directory to install the files into\n"
        "   program, library: command passed by default to the icmbuild "
                                                                    "script\n"
        "\n");

    exit(1);
}

void die(string s)
{
    printf(g_program, ": ", s, "\n");
    exit(1);
}

int isFile(string s)
{
    return (int)stat(P_NOCHECK, s)[0] & S_IFREG;
}

void syscall(string command)
{
    if (g_debug)
        printf(command, "\n");
    else
        system(command);
}

void md(string dir)
{
    int idx;
    for (idx = 0; idx < sizeof(g_mkdir); ++idx)
    {
        if (g_mkdir[idx] == dir)
            return;
    }
    syscall("mkdir -p " + dir);    
    g_mkdir += (list)dir;
}

string absPath(string arg)
{
    if (arg[0] != "/")
        arg = g_cwd + arg;
    if (arg[strlen(arg) - 1] != "/")
        arg += "/";
    return arg;
}

void arguments(int argc, list argv)
{
    int cmdidx = 1;
    string arg;
    list icm;
    int length;

    icm = getenv("ICM");                // ICM environment var defined?

    if ((int)icm[0] == 1)                
        g_skelpath = icm[1];            // then re-assign skelpath

    while (cmdidx < argc)
    {
        arg = argv[cmdidx];

        if (arg[0] != "-")              // no (more) options
            break;

        if (arg[1] == "c")              // -c: re-assign g_confpath
        {
            arg = substr(arg, 2, 999);  // get all beyond -c

            if (arg == "")              // or get then next argument
            {
                if (cmdidx == argc)
                    die("-c lacks configuration file specification");

                arg = argv[++cmdidx];
            }
            g_confpath = absPath(arg);  // reassign confpath
        }
        else if (arg[1] == "d")         // -d: debug
            g_debug = 1;
        else if (arg[1] == "I")         // -I: no skeletons
            g_skeletons = 0;
        else if (arg[1] == "r")         // -r: replace existing file(s)
        {
            g_askreplace = 0;
            g_replace = 1;
        }
        else if (arg[1] == "s")         // -s: re-assign g_skelpath
        {
            arg = substr(arg, 2, 999);  // get all beyond -s

            if (arg == "")              // or get then next argument
            {
                if (cmdidx == argc)
                    die("-s lacks skeleton dir specification");

                arg = argv[++cmdidx];
            }
            g_skelpath = absPath(arg);  // reassign skelpath
        }
        else
            printf("[Warning] ignoring unkown option ", arg, "\n");

        ++cmdidx;
    }

    g_conffile = g_confpath + "icmstart.rc";

    if (!isFile(g_conffile))
        die("Can't find configuration file `" + g_conffile);

    g_destpath = argv[cmdidx];
    if (g_destpath[strlen(g_destpath) - 1] != "/")
        g_destpath += "/";
    md(g_destpath);                       // install the target dir

    if (!g_debug)
        g_destpath = chdir(g_destpath);

    if (++cmdidx < argc)
    {
        arg = argv[cmdidx];
        if (arg == "program" || arg == "library")
            g_defaultcommand = "#define DEFCOM \"" + arg + "\"\n";
        else
            printf("Ignored initial command `", arg, "' for icmbuild\n");
    }
}

int replace(string target)
{
    string ret;

    while (g_askreplace)
    {
        printf("`", target, "' exists.\n"
               "Replace [?akNy] ? ");
        ret = getch();

        if (ret == "a")
        {
            g_replace = 1;
            g_askreplace = 0;
            break;
        }

        if (ret == "k")
        {
            g_askreplace = 0;
            break;
        }

        if (ret == "y")
            return 1;

        if (ret == "n" || ret == "\n")
            return 0;

        printf("Press `a' to replace all,\n"
               "      `k' to keep all current versions\n"
               "      `n' to keep current version (default)\n"
               "      `?' shows this help\n");
    }
    return g_replace;
}

int install(string target)
{
    return (int)(!exists(target) || replace(target));
}

    // a line in the conffile may be organized as follows (except for empty
    // lines and comment lines starting at # in column 0)
    // name is either a file or a directory; directories are copied
    // completely. 
    //  name                - skelpath/name is installed as destpath/name
    //  ./path/name         - $cwd/path/name is installed as destpath/name
    //  /path/name          - /path/name is installed as destpath/name
    // a second entry may be dest (path OK): destpath/dest will be the
    // destination. E.g.:
    //  name  one/two       - skelpath/name is installed as destpath/one/two
    // A first argument ? on the line indicates that installation is optional
int install_file(string source, string dest)
{
    int idx;
    string rawDest;
    
    if (source[0] == ".")
        source = g_cwd + source;
    else
    {
        idx = strfind(source, "/");

        if (idx == -1)
            source = g_skelpath + source;
        else if (idx > 0)
            source = g_cwd + source;
    }
        
    if (!exists(source))
    {
        printf("[Warning] Can't find `" + source + "'\n");
        return 0;
    }

    if (dest == "")
        dest = change_path(source, g_destpath);
    else    
        dest = g_destpath + dest;

    idx = strlen(dest) - 1;

    if (dest[idx] == "/")
        dest = substr(dest, 0, idx);

    if (install(dest))
    {
        md(get_path(dest));
        syscall("cp -rd " + source + " " + dest);
        return 1;
    }

    return 0;
}

void install_std()
{
    install_file(g_confpath + "VERSION", "");
    install_file(g_confpath + "AUTHOR", "");
                                        // install a default command if 
                                        // provided as last arg.
    if (install_file("icmconf", "") && g_defaultcommand != "")
        fprintf(g_destpath + "icmconf", g_defaultcommand);
}

int confirminstall(string source, string dest)
{
    if (g_confirminstall)
    {
        if (source == dest)
            printf("Install `", dest, "' [yN] ? ");
        else
            printf("Install `", source, "' as `", dest, "' [yN] ? ");
        return getch() == "y";
    }

    return 1;
}

    // a line in the conffile may be organized as follows (name is either
    //  a file or a directory; directories are copied completely):
    //  name        - name is located in skelpath and installed at destpath
    //  name  dest  - name is located in skelpath and installed at destpath/name
    //                if name is a directory then the destination will be
    //                destpath/dest/name. dest may also be /dest
    //  path/name   - relative or absolute path's name will be installed at
    //                destpath. Relative is relative to the startup directory
    //  path/name dest - relative or absolute path's name will be installed
    //                at destpath/dest. dest may also be /dest
void installLine(string confline)
{
    int idx;
    list fields;
    string source;
    string dest;

    fields = strtok(confline, " \t\n");
    source = fields[0];

                                            // empty line or comment
    if (sizeof(fields) == 0 || source[0] == "#")
        return;

    g_confirminstall = source == "?";       // need confirmation ?

    if (g_confirminstall)                   // set source and dest fm confline
    {
        dest = source = fields[1];
        if (sizeof(fields) > 2)
            dest = fields[2];
    }
    else if (sizeof(fields) > 1)
        dest = fields[1];
    else
        dest = source;

    if (!g_replace && !g_askreplace && exists(g_destpath + dest))
        return;

    if (!confirminstall(source, dest))
            return;

    install_file(source, dest);
}

void install_rc()
{
    list line;

    while (1)
    {
        line = fgets(g_conffile, (int)line[1]);
        if (!line)
            break;
        installLine(line[0]);
    }
}

int main(int argc, list argv)
{
    echo(OFF);

    g_program = get_base(argv[0]);

    if (argc == 1)
        usage();

    g_cwd = chdir("");

    arguments(argc, argv);

    install_std();              // install CLASSES VERSION and icmconf
    install_rc();               // install .rc file elements

    printf("Done. Don't forget to inspect the #defines in\n"
            "'", g_destpath, "icmconf'\n");

    return 0;
}
